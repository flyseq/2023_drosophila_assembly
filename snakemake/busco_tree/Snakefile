import os, re, glob

missingNo=1   #max number of missing taxa
maxBuscos=250  #max number of BUSCOs to use
buscoPath="/scratch/users/bkim331/busco/busco/" # path to BUSCO folders
fourfoldref="D.melanogaster"

#speciesNum = len(os.listdir('{}'.format(buscoPath))) #count number of species
#speciesList = [x.replace('.busco','') 
#               for x in os.listdir('{}'.format(buscoPath))] #list of species
speciesNum = len(glob.glob('{}/*.busco'.format(buscoPath))) # count number of species in BUSCO folder
speciesList = [x.split('/')[-1].replace('.busco','') 
               for x in glob.glob('{}/*.busco'.format(buscoPath))] # list of species

singularity:
    "/scratch/users/bkim331/busco/buscotree.simg"

rule all:
    input:
        sptree="busco_species_astral_withtips.tree",
        modall="busco_species_rescaled_subs.mod",
        treeall="busco_species_rescaled_subs.tree",
        mod4d="busco_4d.mod",
        tree4d="busco_4d.tree"

rule getCompleteBUSCOList:
    input:
        expand("{buscoPath}", buscoPath=buscoPath)
    output:
        "complete_buscos.txt"
    shell:
        "[ -f complete_buscos.txt ] && rm complete_buscos.txt; "
        """ ( for file in $(find {input} -name "full_table.tsv"); do """
        """ grep -v "^#" ${{file}} | awk '$2=="Complete" {{print $1}}'; """
        "done ) | sort | uniq -c | sort -nr -k1 > complete_buscos.txt"

checkpoint filterBUSCO:
    input:
        completeList="complete_buscos.txt",
    output:
        "final_busco_ids.txt"
    params:
        minSpecies=(speciesNum-missingNo),
        maxBuscos=(maxBuscos)
    shell:
        """ awk '($1>={params.minSpecies}){{print $2}}' {input.completeList} """
        "| shuf -n {params.maxBuscos} "
        "> {output}; "
        "mkdir -p busco_nt && "
        "mkdir -p busco_nt_aln && "
        "mkdir -p busco_nt_aln_tr && "
        "mkdir -p iqtree"

rule aggregateBUSCO:
    output:
        'busco_nt/{busco}.fna'
    shell:
        """find . -wholename "*/single_copy_busco_sequences/{wildcards.busco}.fna" """
        """| sed -E 's/\.\/busco\/([A-Za-z0-9\.\-]*)\.busco.+/\\1 \\0/' """
        "| while read sp line; do """
        " ( cat ${{line}} "
        """| sed -E "s/>.+/>${{sp}}/" | tr '.' '_' | tr '[:lower:]' '[:upper:]' >> {output} ); """
        "done "

rule alignBUSCO:
    input:
        'busco_nt/{busco}.fna'
    output:
        'busco_nt_aln/{busco}.aln.fasta'
    threads:
        10
    shell:
        "mafft --thread {threads} --retree 2 {input} > {output}"

rule trimBUSCO:
    input:
        'busco_nt_aln/{busco}.aln.fasta'
    output:
        'busco_nt_aln_tr/{busco}.aln.tr.fasta'
    shell:
        "python3 /tools/fasta_site_trim.py --Nbase 3 --input {input} "
        "&& mv ./busco_nt_aln/{wildcards.busco}.aln.fasta.tr {output}"

rule iqtreeBUSCO:
    input:
        'busco_nt_aln_tr/{busco}.aln.tr.fasta'
    output:
        'iqtree/iqtree_{busco}.treefile'
    threads:
        10
    resources:
        mem_mb=16000
    shell:
        "iqtree -s {input} -bb 1000 -nt {threads} -m GTR+I+G "
        "-blmin 1e-300 -safe -pre iqtree/iqtree_{wildcards.busco} "
        "-mem {resources.mem_mb}M -redo > iqtree/{wildcards.busco}.log 2>&1 || true"

def listBUSCO(wildcards):
    buscoListFile = checkpoints.filterBUSCO.get(**wildcards).output[0]
    buscoList = [x.strip("\n") for x in open(buscoListFile, 'r').readlines()]
    return expand("iqtree/iqtree_{b}.treefile", b=buscoList)

rule catIQTree:
    input:
        listBUSCO
    output:
        "busco_gene_trees_ml.tree"
    shell:
        "cat {input} > {output}"

rule makeASTRALTree:
    input:
        "busco_gene_trees_ml.tree"
    output:
        "busco_species_astral.tree"
    threads:
        80
    shell:
        "java -jar /tools/astral.jar "
        "--input {input} --output {output} -T {threads}"

rule addTips:
    input:
        "busco_species_astral.tree"
    output:
        "busco_species_astral_withtips.tree"
    shell:
        "cat {input} | sed -E 's/([A-Z]_[A-Z0-9_\-]+)/\\1:1/g' > {output}"

rule phyloFitAll:
    input:
        fa="busco_nt_aln/{busco}.aln.fasta",
        tree="busco_species_astral_withtips.tree"
    output:
        ss="busco_nt_aln_ss/{busco}.ss",
        mod="busco_nt_aln_ss/{busco}.mod"
    params:
        spList=','.join([x.upper().replace('.','_') for x in speciesList])
    shell:
        "msa_view {input.fa} --in-format FASTA --order {params.spList} "
        "    --collapse-missing --out-format SS > {output.ss} "
        " && phyloFit --tree $(cat {input.tree}) --subst-mod REV "
        "    --msa-format SS --out-root busco_nt_aln_ss/{wildcards.busco}"
        "    {output.ss}"

def listModAll(wildcards):
    buscoListFile = checkpoints.filterBUSCO.get(**wildcards).output[0]
    buscoList = [x.strip("\n") for x in open(buscoListFile, 'r').readlines()]
    return expand("busco_nt_aln_ss/{b}.mod", b=buscoList)

rule phyloBootAll:
    input:
        listModAll
    output:
        mod="busco_species_rescaled_subs.mod",
        tree="busco_species_rescaled_subs.tree"
    shell:
        "phyloBoot --read-mods *<(ls busco_nt_aln_ss/*.mod) "
        "    --output-average {output.mod} "
        " && tail -n 1 {output.mod} | sed 's/TREE: //' > {output.tree}"

checkpoint filterBUSCOAA:
    input:
        "final_busco_ids.txt",
    output:
        "final_busco_ids_refonly.txt"
    params:
        ref=fourfoldref
    shell:
        "cat {input} <( cat busco/{params.ref}.busco/run_diptera_odb10/full_table.tsv "
        """ | awk '$2=="Complete"{{print $1}}' ) """
        " | sort | uniq -c | sort -nr -k1 "
        """ | awk '$1==2{{print $2}}' """
        " > {output}"

rule aggregateBUSCOAA:
    output:
        'busco_aa/{busco}.faa'
    shell:
        """find . -wholename "*/single_copy_busco_sequences/{wildcards.busco}.faa" """
        """| sed -E 's/\.\/busco\/([A-Za-z0-9\.]*)\.busco.+/\\1 \\0/' """
        "| while read sp line; do """
        " ( cat ${{line}} "
        """| sed -E "s/>.+/>${{sp}}/" | tr '.' '_' | tr '[:lower:]' '[:upper:]' >> {output} ); """
        "done "

rule alignBUSCOAA:
    input:
        faa='busco_aa/{busco}.faa',
        tree='iqtree/iqtree_{busco}.treefile'
    output:
        'busco_aa_aln/{busco}.aln.faa'
    threads:
        10
    shell:
        "mkdir -p busco_aa_aln "
        " && mafft --thread {threads} --auto {input.faa} > {output}"

rule backtrans:
    input:
        faa='busco_aa_aln/{busco}.aln.faa',
        fna='busco_nt/{busco}.fna'
    output:
        'busco_codon_aln/{busco}.codon.aln.fasta'
    threads:
        2
    shell:
        "mkdir -p busco_codon_aln"
        " && /tools/pal2nal.pl {input.faa} {input.fna} -output fasta"
        " > {output}"

rule parseGFF:
    input:
        buscoList="final_busco_ids.txt"
    output:
        directory('busco_gffs')
    params:
        ref=fourfoldref
    threads:
        2
    shell:
        "bash /tools/parsegff.sh {params.ref} {input.buscoList}"

rule make4dSS:
    input:
        fna="busco_codon_aln/{busco}.codon.aln.fasta",
        gffdir="busco_gffs",
    output:
        ss="busco_codon_ss/{busco}.4dcodons.ss",
        ss4d="busco_codon_ss/{busco}.4d.ss"
    params:
        spList=','.join([x.upper().replace('.','_') for x in speciesList])
    threads: 
        2
    shell:
        "mkdir -p busco_codon_ss"
        " && msa_view {input.fna} --in-format FASTA "
        "    --4d --features {input.gffdir}/{wildcards.busco}.gff "
        "    --collapse-missing --out-format SS > {output.ss} "
        " && msa_view {output.ss} --in-format SS --out-format SS "
        "    --order {params.spList} --tuple-size 1 > {output.ss4d}"

def list4dAll(wildcards):
    buscoListFile = checkpoints.filterBUSCOAA.get(**wildcards).output[0]
    buscoList = [x.strip("\n") for x in open(buscoListFile, 'r').readlines()]
    return expand("busco_codon_ss/{b}.4d.ss", b=buscoList)

checkpoint split4dSS:
    input:
        list4dAll, 
        tree="busco_species_astral_withtips.tree"
    output:
        "tmp.4d.files"
    params:
        spList=','.join([x.upper().replace('.','_') for x in speciesList])
    threads:
        2
    shell:
        "mkdir -p tmp.4d"
        " && ls busco_codon_ss/*.4d.ss | shuf > tmp.4dlist "
        " && split -n l/12 -d tmp.4dlist tmp.4d/tmp.4dchunk. "
        " && rm tmp.4dlist"
        " && ls tmp.4d/tmp.4dchunk.?? | sed 's/tmp.4d\///' > {output} "
        " && cat tmp.4d.files | while read chunk; do msa_view "
        "    --aggregate {params.spList} --unordered-ss --in-format SS "
        "    --out-format SS $(cat tmp.4d/${{chunk}}) > tmp.4d/${{chunk}}.ss; done"

rule indiv4dMod:
    input:
        ss="tmp.4d/{chunk}.ss",
        tree="busco_species_astral_withtips.tree"
    output:
        mod="tmp.4d/{chunk}.mod"
    params:
        spList=','.join([x.upper().replace('.','_') for x in speciesList])
    threads:
        2
    shell:
        """phyloFit --tree "$(cat {input.tree} | tr -d ';')" --subst-mod REV -I 20 """
        '--msa-format SS --out-root tmp.4d/{wildcards.chunk} {input.ss}'

def list4dChunks(wildcards):
    chunkFile = checkpoints.split4dSS.get(**wildcards).output[0]
    chunkList = [x.strip("\n") for x in open(chunkFile, 'r').readlines()]
    return expand("tmp.4d/{c}.mod", c=chunkList)

rule avg4dMod:
    input:
        list4dChunks
    output:
        mod="busco_4d.mod",
        tree="busco_4d.tree"
    threads:
        2
    shell:
        "phyloBoot --read-mods *<(ls tmp.4d/tmp.4dchunk.*.mod) --output-average {output.mod}"
        " && tail -n 1 {output.mod} | sed 's/TREE: //' > {output.tree}"
        " && rm -r tmp.4d/"
