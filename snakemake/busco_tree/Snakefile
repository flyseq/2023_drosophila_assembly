import os, re, glob

# load settings from configuration file
configfile: "config.yaml"
print (config)

# save config settings
missingNo=config['maxMissing']
maxBuscos=config['maxBUSCO']
buscoPath=config['buscoPath']
fourfoldref="D.melanogaster"

# count number of species in BUSCO folder
speciesNum = len(glob.glob('{}/*.busco'.format(buscoPath))) 
# make a list of species
speciesList = [x.split('/')[-1].replace('.busco','') 
               for x in glob.glob('{}/*.busco'.format(buscoPath))] 

singularity:
    buscoPath=config['singularity_images']['busco']

rule all:
    input:
        sptree="busco_species_astral_withtips.tree"

rule getCompleteBUSCOList:
    input:
        expand("{buscoPath}", buscoPath=buscoPath)
    output:
        "complete_buscos.txt"
    shell:
        "[ -f complete_buscos.txt ] && rm complete_buscos.txt; "
        """ ( for file in $(find {input} -name "full_table.tsv"); do """
        """ grep -v "^#" ${{file}} | awk '$2=="Complete" {{print $1}}'; """
        "done ) | sort | uniq -c | sort -nr -k1 > complete_buscos.txt"

checkpoint filterBUSCO:
    input:
        completeList="complete_buscos.txt",
    output:
        "final_busco_ids.txt"
    params:
        minSpecies=(speciesNum-missingNo),
        maxBuscos=(maxBuscos)
    shell:
        """ awk '($1>={params.minSpecies}){{print $2}}' {input.completeList} """
        "| shuf -n {params.maxBuscos} "
        "> {output}; "
        "mkdir -p busco_nt && "
        "mkdir -p busco_nt_aln && "
        "mkdir -p busco_nt_aln_tr && "
        "mkdir -p iqtree"

rule aggregateBUSCO:
    output:
        'busco_nt/{busco}.fna'
    shell:
        """find . -wholename "*/single_copy_busco_sequences/{wildcards.busco}.fna" """
        """| sed -E 's/\.\/busco\/([A-Za-z0-9\.\-]*)\.busco.+/\\1 \\0/' """
        "| while read sp line; do """
        " ( cat ${{line}} "
        """| sed -E "s/>.+/>${{sp}}/" | tr '.' '_' | tr '[:lower:]' '[:upper:]' >> {output} ); """
        "done "

rule alignBUSCO:
    input:
        'busco_nt/{busco}.fna'
    output:
        'busco_nt_aln/{busco}.aln.fasta'
    threads:
        10
    shell:
        "mafft --thread {threads} --retree 2 {input} > {output}"

rule trimBUSCO:
    input:
        'busco_nt_aln/{busco}.aln.fasta'
    output:
        'busco_nt_aln_tr/{busco}.aln.tr.fasta'
    shell:
        "python3 /tools/fasta_site_trim.py --Nbase 3 --input {input} "
        "&& mv ./busco_nt_aln/{wildcards.busco}.aln.fasta.tr {output}"

rule iqtreeBUSCO:
    input:
        'busco_nt_aln_tr/{busco}.aln.tr.fasta'
    output:
        'iqtree/iqtree_{busco}.treefile'
    threads:
        10
    resources:
        mem_mb=16000
    shell:
        "iqtree -s {input} -bb 1000 -nt {threads} -m GTR+I+G "
        "-blmin 1e-300 -safe -pre iqtree/iqtree_{wildcards.busco} "
        "-mem {resources.mem_mb}M -redo > iqtree/{wildcards.busco}.log 2>&1 || true"

def listBUSCO(wildcards):
    buscoListFile = checkpoints.filterBUSCO.get(**wildcards).output[0]
    buscoList = [x.strip("\n") for x in open(buscoListFile, 'r').readlines()]
    return expand("iqtree/iqtree_{b}.treefile", b=buscoList)

rule catIQTree:
    input:
        listBUSCO
    output:
        "busco_gene_trees_ml.tree"
    shell:
        "cat {input} > {output}"

rule makeASTRALTree:
    input:
        "busco_gene_trees_ml.tree"
    output:
        "busco_species_astral.tree"
    threads:
        80
    shell:
        "java -jar /tools/astral.jar "
        "--input {input} --output {output} -T {threads}"

rule addTips:
    input:
        "busco_species_astral.tree"
    output:
        "busco_species_astral_withtips.tree"
    shell:
        "cat {input} | sed -E 's/([A-Z]_[A-Z0-9_\-]+)/\\1:1/g' > {output}"