# read assembly settings from config file
configfile: "config.yaml"
print (config)

# check if Illumina reads are provided
illumExists = ([x in config.keys() for x in ['fwd','rev']].count(True) == 2)

# check if basecalls already exist, if not then basecall with Guppy
if os.path.exists(config['sample']) \
   and not os.path.exists('{}.fastq.gz'.format(config['sample'])):
    rule runGuppy:
        singularity: config['singularity_images']['assembly']
        input:
            directory("{sample}")
        output:
            "{sample}.fastq.gz"
        threads:
            80
        shell:
            'resume=""; [ -d "{wildcards.sample}.basecalled" ] && resume="--resume"; '
            "guppy_basecaller -i {input}"
            " -s {wildcards.sample}.basecalled --recursive"
            " --config {config[nanopore][guppy_mod]} --min_qscore {config[nanopore][min_qscore]}"
            ' --device "cuda:all"'
            " --trim_strategy dna --calib_detect ${{resume}}"
            " && cat {wildcards.sample}.basecalled/pass/*.fastq"
            " | pigz -p{threads}"
            " > {output}"

# if Illumina reads exist, trim adapters
if illumExists:
  rule trim_adapter:
    singularity: config['singularity_images']['assembly']
    input:
        fwd=config['fwd'],
        rev=config['rev']
    output:
        out1=temporary("{sample}_tr_1.fastq"),
        out2=temporary("{sample}_tr_2.fastq"),
        outs=temporary("{sample}_tr_unpaired.fastq")
    threads:
        80
    shell:
        "/tools/bbmap/bbduk.sh "
        "in={input.fwd} in2={input.rev} "
        "out1={output.out1} out2={output.out2} outs={output.outs} "
        "ref=/tools/bbmap/resources/adapters.fa,kapa "
        "threads={threads} ktrim=r k=23 mink=11 hdist=1 ftm=5 tpe tbo"

# run hybrid error correction
if illumExists:
    rule ratatosk:
        singularity: config['singularity_images']['assembly']
        input:
            lreads = "{sample}.fastq.gz",
            fwdtr="{sample}_tr_1.fastq",
            revtr="{sample}_tr_2.fastq"
        output:
            "{sample}.corr.fastq.gz"
        params:
            rataQV=config['ratatosk']['qv']
        threads:
            80
        shell:
            "Ratatosk correct -v -G -c {threads} -Q {params.rataQV}"
            " -s {input.fwdtr} -s {input.revtr} -l {input.lreads}"
            " -o {wildcards.sample}.corr"

# initial draft assembly with Flye
if illumExists:
  rule runFlye:
    singularity: config['singularity_images']['assembly']
    input:
        "{sample}.corr.fastq.gz"
    output:
        draft="{sample}.flye.fasta",
        flyeDir=temporary(directory("{sample}.flye"))
    threads:
        80
    shell:
        'resume=""; [ -d "{output.flyeDir}" ] && resume="--resume"; '
        "flye --nano-hq {input} --threads {threads} "
        "--out-dir {output.flyeDir} {config[flye][flags]} ${{resume}}"
        "&& cp {output.flyeDir}/assembly.fasta {output.draft}"
else:
  rule runFlye:
    singularity: config['singularity_images']['assembly']
    input:
        "{sample}.fastq.gz"
    output:
        draft="{sample}.flye.fasta",
        flyeDir=temporary(directory("{sample}.flye"))
    threads:
        80
    shell:
        'resume=""; [ -d "{output.flyeDir}" ] && resume="--resume"; '
        "flye {config[flye][reads]} {input} --threads {threads} "
        "--out-dir {output.flyeDir} {config[flye][flags]} ${{resume}}"
        "&& cp {output.flyeDir}/assembly.fasta {output.draft}"
