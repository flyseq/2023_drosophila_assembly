# read assembly settings from config file
configfile: "config.yaml"
print (config)

# check if Illumina reads are provided
illumExists = ([x in config.keys() for x in ['fwd','rev']].count(True) == 2)

# rule all - two different ones with Illumina and without
if illumExists:
  rule all:
    input:
        reads=expand("{sample}.fastq.gz",sample=config['sample']),
        flyeAssm=expand("{sample}.flye.fasta",sample=config['sample']),
        cleanedAssm=expand("{sample}.cleaned.fasta",sample=config['sample']),
        contamAssm=expand("{sample}.contam.fasta",sample=config['sample']),
        fcsReport=expand("{sample}.fcs.report",sample=config['sample']),
        merqQV=expand("{sample}.merqury.qv",sample=config['sample']),
        merqQVg=expand("{sample}.merqury.genome.qv",sample=config['sample']),
        merqComp=expand("{sample}.merqury.completeness.stats",sample=config['sample']),
        yak=expand("{sample}.yak.out",sample=config['sample']),
        pmdVCF=expand("{sample}.vcf.gz",sample=config['sample']),
        pmdVCFidx=expand("{sample}.vcf.gz.tbi",sample=config['sample']),
        pmdGVCF=expand("{sample}.g.vcf.gz",sample=config['sample']),
        pmdGVCFidx=expand("{sample}.g.vcf.gz.tbi",sample=config['sample']),
        pmdQV=expand("{sample}.PMDqv.out",sample=config['sample']),
        consensus=expand("{sample}-families.fa",sample=config['sample']),
        stk=expand("{sample}-families.stk",sample=config['sample']),
        genome=expand("{sample}.rm.fasta",sample=config['sample']),
        gff=expand("{sample}.rm.gff",sample=config['sample'])
else:
  rule all:
    input:
        reads=expand("{sample}.fastq.gz",sample=config['sample']),
        flyeAssm=expand("{sample}.flye.fasta",sample=config['sample']),
        cleanedAssm=expand("{sample}.cleaned.fasta",sample=config['sample']),
        contamAssm=expand("{sample}.contam.fasta",sample=config['sample']),
        fcsReport=expand("{sample}.fcs.report",sample=config['sample']),
        pmdVCF=expand("{sample}.vcf.gz",sample=config['sample']),
        pmdVCFidx=expand("{sample}.vcf.gz.tbi",sample=config['sample']),
        pmdGVCF=expand("{sample}.g.vcf.gz",sample=config['sample']),
        pmdGVCFidx=expand("{sample}.g.vcf.gz.tbi",sample=config['sample']),
        pmdQV=expand("{sample}.PMDqv.out",sample=config['sample']),
        consensus=expand("{sample}-families.fa",sample=config['sample']),
        stk=expand("{sample}-families.stk",sample=config['sample']),
        genome=expand("{sample}.rm.fasta",sample=config['sample']),
        gff=expand("{sample}.rm.gff",sample=config['sample'])

# check if basecalls already exist, if not then basecall with Guppy
if os.path.exists(config['sample']) \
   and not os.path.exists('{}.fastq.gz'.format(config['sample'])):
    rule runGuppy:
        singularity: config['singularity_images']['assembly']
        input:
            directory("{sample}")
        output:
            "{sample}.fastq.gz"
        threads:
            80
        shell:
            'resume=""; [ -d "{wildcards.sample}.basecalled" ] && resume="--resume"; '
            "guppy_basecaller -i {input}"
            " -s {wildcards.sample}.basecalled --recursive"
            " --config {config[nanopore][guppy_mod]} --min_qscore {config[nanopore][min_qscore]}"
            ' --device "cuda:all"'
            " --trim_strategy dna --calib_detect ${{resume}}"
            " && cat {wildcards.sample}.basecalled/pass/*.fastq"
            " | pigz -p{threads}"
            " > {output}"

# initial draft assembly with Flye
rule runFlye:
    singularity: config['singularity_images']['assembly']
    input:
        "{sample}.fastq.gz"
    output:
        draft="{sample}.flye.fasta",
        flyeDir=temporary(directory("{sample}.flye"))
    threads:
        80
    shell:
        'resume=""; [ -d "{output.flyeDir}" ] && resume="--resume"; '
        "flye {config[flye][reads]} {input} --threads {threads} "
        "--out-dir {output.flyeDir} {config[flye][flags]} ${{resume}}"
        "&& cp {output.flyeDir}/assembly.fasta {output.draft}"

# purge_dups step 1
rule runPurgeMap:
    singularity: config['singularity_images']['assembly']
    input:
        reads="{sample}.fastq.gz",
        draft="{sample}.flye.fasta"
    output:
        paf=temporary("{sample}.purge/{sample}.paf"),
        cutoffs=temporary("{sample}.purge/{sample}.cutoffs"),
        stat=temporary("{sample}.purge/PB.stat"),
        pb=temporary("{sample}.purge/PB.base.cov")
    threads:
        80
    shell:
        "minimap2 -x map-ont -t{threads} {input.draft} "
        " {input.reads} > {output.paf} "
        "&& pbcstat -O {wildcards.sample}.purge/ {output.paf} "
        "&& calcuts {output.stat} > {output.cutoffs}"

# purge_dups step 2
rule runPurgeSplit:
    singularity: config['singularity_images']['assembly']
    input:
        genome="{sample}.flye.fasta"
    output:
        temporary("{sample}.purge/{sample}.flye.fasta.split")
    shell:
        "split_fa {input.genome} > {output}"

# purge_dups step 3
rule runPurgeSplitMap:
    singularity: config['singularity_images']['assembly']
    input:
        split="{sample}.purge/{sample}.flye.fasta.split"
    output:
        temporary("{sample}.purge/{sample}.flye.fasta.split.paf")
    threads:
        80
    shell:
        "minimap2 -xasm5 -t{threads} -DP {input.split} {input.split} > {output}"

# purge_dups step 4
rule runPurgePurge:
    singularity: config['singularity_images']['assembly']
    input:
        draft="{sample}.flye.fasta",
        paf="{sample}.purge/{sample}.flye.fasta.split.paf",
        cutoffs="{sample}.purge/{sample}.cutoffs",
        pb="{sample}.purge/PB.base.cov",
        stat="{sample}.purge/PB.stat"
    output:
        purged="{sample}.purged.fasta",
        intervals=temporary("{sample}.purge/{sample}.dups.bed"),
        log=temporary("{sample}.purge/{sample}.purge_dups.log")
    shell:
        "cd {wildcards.sample}.purge/ ; "
        "purge_dups -2 -T ../{input.cutoffs} -c ../{input.pb} ../{input.draft} > "
        "../{output.intervals} 2> ../{output.log} "
        " && get_seqs -e ../{output.intervals} ../{input.draft} "
        " && mv purged.fa ../{output.purged}

# medaka polishing step 1
rule runMedakaAlign:
    singularity: config['singularity_images']['assembly']
    input:
        draft="{sample}.purged.fasta",
        reads="{sample}.fastq.gz"
    output:
        bam=temporary("{sample}.calls_to_draft.bam"),
        bai=temporary("{sample}.calls_to_draft.bam.bai")
    threads:
        80
    shell:
        "mini_align -i {input.reads} -r {input.draft} -P -m "
        " -p {wildcards.sample}.calls_to_draft -t {threads}"

# medaka polishing step 2
rule runMedakaConsensus:
    singularity: config['singularity_images']['assembly']
    input:
        draft="{sample}.purged.fasta",
        bam="{sample}.calls_to_draft.bam",
        bai="{sample}.calls_to_draft.bam.bai",
    output:
        temporary("{sample}.hdf")
    threads:
        4
    params:
        mod = config['nanopore']['medaka_mod']
    shell:
        '[ -f "{output}" ] && rm {output}; '
        "medaka consensus {input.bam} {output} "
        " --model {params.mod} --threads {threads}"

# medaka polishing step 3
rule runMedakaStitch:
    singularity: config['singularity_images']['assembly']
    input:
        draft="{sample}.purged.fasta",
        hdf="{sample}.hdf"
    output:
        "{sample}.medaka.fasta"
    threads:
        80
    shell:
        "medaka stitch {input.hdf} {input.draft} {output}"

# if Illumina reads exist, trim adapters
if illumExists:
  rule trim_adapter:
    singularity: config['singularity_images']['assembly']
    input:
        fwd=config['fwd'],
        rev=config['rev']
    output:
        out1=temporary("{sample}_tr_1.fastq"),
        out2=temporary("{sample}_tr_2.fastq"),
        outs=temporary("{sample}_tr_unpaired.fastq")
    threads:
        80
    shell:
        "/tools/bbmap/bbduk.sh "
        "in={input.fwd} in2={input.rev} "
        "out1={output.out1} out2={output.out2} outs={output.outs} "
        "ref=/tools/bbmap/resources/adapters.fa,kapa "
        "threads={threads} ktrim=r k=23 mink=11 hdist=1 ftm=5 tpe tbo"

rule indexMedaka:
    singularity: config['singularity_images']['assembly']
    input: 
        "{sample}.medaka.fasta"
    output:
        temporary("{sample}.medaka.fasta.amb"),
        temporary("{sample}.medaka.fasta.ann"),
        temporary("{sample}.medaka.fasta.bwt"),
        temporary("{sample}.medaka.fasta.pac"),
        temporary("{sample}.medaka.fasta.sa")
    threads: 
        1
    shell:
        "bwa index {input}"

# If Illumina reads exist, map paired reads
# Parabricks automatically marks duplicates
if illumExists:
  rule mapPilonPaired:
    singularity: config['singularity_images']['parabricks']
    input:
        fa="{sample}.medaka.fasta",
        fwdtrim="{sample}_tr_1.fastq",
        revtrim="{sample}_tr_2.fastq",
        medamb = "{sample}.medaka.fasta.amb",
        medann = "{sample}.medaka.fasta.ann",
        medbwt = "{sample}.medaka.fasta.bwt",
        medpac = "{sample}.medaka.fasta.pac",
        medsa = "{sample}.medaka.fasta.sa"
    output:
        temporary("{sample}_paired.bam")
    threads:
        80
    shell:
        "pbrun fq2bam --ref {input.fa} --in-fq {input.fwdtrim} {input.revtrim}"
        " --out-bam {output}"

# If Illumina reads exist, map single reads
# Parabricks automatically marks duplicates
if illumExists:
  rule mapPilonSingle:
    singularity: config['singularity_images']['parabricks']
    input:
        fa="{sample}.medaka.fasta",
        unptrim="{sample}_tr_unpaired.fastq",
        medamb = "{sample}.medaka.fasta.amb",
        medann = "{sample}.medaka.fasta.ann",
        medbwt = "{sample}.medaka.fasta.bwt",
        medpac = "{sample}.medaka.fasta.pac",
        medsa = "{sample}.medaka.fasta.sa"
    output:
        temporary("{sample}_unpaired.bam")
    threads:
        80
    shell:
        "pbrun fq2bam --ref {input.fa} --in-se-fq {input.unptrim}"
        " --out-bam {output}"

# If Illumina reads exist, merge single and paired BAM
if illumExists:
  rule merge_bams:
    singularity: config['singularity_images']['assembly']
    input:
        paired="{sample}_paired.bam",
        unpaired="{sample}_unpaired.bam"
    output:
        temporary("{sample}.pilon.bam")
    threads:
        80
    shell:
        "sambamba merge -t {threads} -p {output} {input}"

#If Illumina reads exist, run Pilon
if illumExists:
  rule runPilon:
    singularity: config['singularity_images']['assembly']
    input:
        draft="{sample}.medaka.fasta",
        bam="{sample}.pilon.bam"
    output:
        pilonFold=temporary(directory("{sample}.pilon")),
        pilon="{sample}.pilon.fasta"
    threads:
        80
    resources:
        mem_mb=200000
    shell:
        "java -Xmx{resources.mem_mb}m -jar /tools/pilon.jar"
        " --genome {input.draft} --bam {input.bam} --outdir {output.pilonFold}"
        " --threads {threads} --fix snps,indels"
        " && cat {output.pilonFold}/pilon.fasta"
        """ | awk '/^>/{{print ">contig_" ++i; next}}{{print}}' """
        " > tmp.fa "
        " && /tools/bbmap/reformat.sh in=tmp.fa out={output.pilon} minlength=10"
        " && rm tmp.fa"

# If Illumina reads don't exist, temporarily sub Medaka file for Pilon file
if not illumExists:
  rule runPilon:
    singularity: config['singularity_images']['assembly']
    input:
        draft="{sample}.medaka.fasta",
    output:
        pilon=temporary("{sample}.pilon.fasta")
    threads:
        1
    shell:
        "/tools/bbmap/reformat.sh in={input.draft} out={output.pilon} minlength=10"

# remove sequencing adapter contamination
rule runFCSadaptor:
    input:
        "{sample}.pilon.fasta"
    output:
        draft=temporary("{sample}.fcs-adaptor.fasta"),
        outDir=temporary(directory("{sample}_fcs-adaptor"))
    params:
        simg=config['singularity_images']['fcsadaptor']
    shell:
        "mkdir -p {output.outDir}; "
        "singularity exec {params.simg}"
        "    /app/fcs/bin/av_screen_x -o {output.outDir} --euk {input}"
        " && cp {output.outDir}/cleaned_sequences/{input} {output.draft}"

# tag contaminant sequence
rule runFCSgx:
    input:
        "{sample}.fcs-adaptor.fasta"
    output:
        outDir=temporary(directory("{sample}_fcsgx")),
        fcsFile="{sample}_fcsgx/{sample}.fcs-adaptor." + config['fcs']['taxid'] + ".fcs_gx_report.txt"
    params:
        simg=config['singularity_images']['fcsgx'],
        gxdb=config['fcs']['fcsdir'],
        taxid=config['fcs']['taxid']
    shell:
        "mkdir -p {output.outDir}; "
        'export FCS_DEFAULT_IMAGE="{params.simg}"; '
        "[ ! -f fcs.py ] && wget https://raw.githubusercontent.com/ncbi/fcs/v0.4.0/dist/fcs.py; "
        "python3 ./fcs.py screen genome --fasta {input}"
        ' --out-dir {output.outDir} --gx-db "{params.gxdb}"'
        " --tax-id {params.taxid}"

# remove contamination from genome
rule removeContam:
    input:
        fcsdir="{sample}_fcsgx",
        fcsfile="{sample}_fcsgx/{sample}.fcs-adaptor." + config['fcs']['taxid'] + ".fcs_gx_report.txt",
        draft="{sample}.fcs-adaptor.fasta"
    output:
        genome="{sample}.cleaned.fasta",
        contam="{sample}.contam.fasta",
        report="{sample}.fcs.report"
    threads:
        1
    shell:
        "cat {input.draft}"
        " | python3 ./fcs.py clean genome --action-report {input.fcsfile}"
        "     --output {wildcards.sample}.tmp.fa --contam-fasta-out {output.contam}; "
        """awk '/^>/{{print ">contig_" ++i; next}}{{print}}' {wildcards.sample}.tmp.fa > {output.genome};"""
        "cp {input.fcsfile} {output.report}"

# If Illumina reads exist, evaluate QV with Yak
if illumExists:
  rule yak:
    singularity: config['singularity_images']['assembly']
    input:
        draft="{sample}.cleaned.fasta",
        fwdtrim="{sample}_tr_1.fastq",
        revtrim="{sample}_tr_2.fastq"
    output:
        yakdb=temporary("{sample}.sr.yak"),
        yakqv="{sample}.yak.out"
    params:
        kmer="21"
    threads:
        80
    shell:
        "yak count -t {threads} -k{params.kmer} -o {output.yakdb}"
        " <(cat {input.fwdtrim} {input.revtrim}) <(cat {input.fwdtrim} {input.revtrim});"
        "yak qv -t {threads} {output.yakdb} {input.draft} > {output.yakqv}"

# If Illumina reads exist, evaluate QV with Merqury - compute optimal kmer size
if illumExists:
    rule merqurykmer:
        singularity: config['singularity_images']['assembly']
        input:
            genome1="{sample}.cleaned.fasta"
        output:
            kmer=temporary("{sample}.merqury.k")
        threads:
            1
        shell:
            'best-k.sh $(cat {input.genome1} | grep -v ">" | tr -d "\n" | wc -c)'
            ' | tail -n1 '
            " | awk '{{ if($1-int($1) > 0){{print int($1) + 1}} else {{print $1}}}}' "
            ' > {output.kmer}'

# If Illumina reads exist, evaluate QV with Merqury - make Meryl DB for fwd
if illumExists:
    rule merquryMeryl1:
        singularity: config['singularity_images']['assembly']
        input:
            fwdtrim="{sample}_tr_1.fastq",
            kmer="{sample}.merqury.k"
        output:
            fwdmeryl=temporary(directory("{sample}.1.meryl"))
        threads:
            80
        shell:
            "meryl k=$(cat {input.kmer}) count threads={threads}"
            " output {output.fwdmeryl} {input.fwdtrim}"

# If Illumina reads exist, evaluate QV with Merqury - make Meryl DB for rev
if illumExists:
    rule merquryMeryl2:
        singularity: config['singularity_images']['assembly']
        input:
            revtrim="{sample}_tr_2.fastq",
            kmer="{sample}.merqury.k"
        output:
            revmeryl=temporary(directory("{sample}.2.meryl"))
        threads:
            80
        shell:
            "meryl k=$(cat {input.kmer}) count threads={threads}"
            " output {output.revmeryl} {input.revtrim}"

# If Illumina reads exist, evaluate QV with Merqury - merge fwd and rev Meryl DBs
if illumExists:
    rule merquryMerylMerge:
        singularity: config['singularity_images']['assembly']
        input:
            fwdmeryl="{sample}.1.meryl",
            revmeryl="{sample}.2.meryl"
        output:
            meryl=temporary(directory("{sample}.meryl"))
        threads:
            80
        shell:
            "meryl union-sum threads={threads}"
            " output {output.meryl} {input.fwdmeryl} {input.revmeryl}"

# If Illumina reads exist, evaluate QV with Merqury - compute QV
if illumExists:
    rule merqury:
        singularity: config['singularity_images']['assembly']
        input:
            meryl="{sample}.meryl",
            genome="{sample}.cleaned.fasta"
        output:
            log="{sample}.merqury.log",
            qvGenome="{sample}.merqury.qv",
            qv1=temporary("{sample}.merqury.{sample}.cleaned.qv"),
            qv="{sample}.merqury.genome.qv",
            completeness="{sample}.merqury.completeness.stats"
        threads:
            80
        shell:
            "merqury {input.meryl} {input.genome}"
            " {wildcards.sample}.merqury > {output.log}; "
            "cp {output.qv1} {output.qv}"

# Map Nanopore reads to draft for Pepper-Margin-Deepvariant
rule pmdAlign:
    singularity: config['singularity_images']['assembly']
    input:
        genome="{sample}.cleaned.fasta",
        reads="{sample}.fastq.gz"
    output:
        bam=temporary("{sample}.reads_to_draft_PMD.bam"),
        bai=temporary("{sample}.reads_to_draft_PMD.bam.bai")
    threads:
        80
    shell:
        "minimap2 -ax map-ont -t{threads} {input.genome} {input.reads} "
        " | samtools sort -@{threads} -o {output.bam}; "
        "samtools index -@{threads} {output.bam}"

# Variant call with Pepper-Margin-Deepvariant
rule pmdCall:
    singularity: config['singularity_images']['pmd']
    input:
        genome="{sample}.cleaned.fasta",
        reads="{sample}.fastq.gz",
        bam="{sample}.reads_to_draft_PMD.bam",
        bai="{sample}.reads_to_draft_PMD.bam.bai"
    output:
        pmdFold=temporary(directory("{sample}.PMD")),
        pmdVCF="{sample}.vcf.gz",
        pmdVCFidx="{sample}.vcf.gz.tbi",
        pmdGVCF="{sample}.g.vcf.gz",
        pmdGVCFidx="{sample}.g.vcf.gz.tbi"
    params:
        model=config['pmd']['model']
    threads:
        80
    shell:
        "run_pepper_margin_deepvariant call_variant"
        " -b {input.bam} -f {input.genome} -o {output.pmdFold}"
        " -p {wildcards.sample} -t {threads} -g {params.model} --gvcf; "
        "cp {output.pmdFold}/{output.pmdVCF} {output.pmdVCF}; "
        "cp {output.pmdFold}/{output.pmdVCFidx} {output.pmdVCFidx}; "
        "cp {output.pmdFold}/{output.pmdGVCF} {output.pmdGVCF}; "
        "cp {output.pmdFold}/{output.pmdGVCFidx} {output.pmdGVCFidx}"

# Compute genome QV from long-read G/VCFs
rule pmdQV:
    singularity: config['singularity_images']['assembly']
    input:
        pmdVCF="{sample}.vcf.gz",
        pmdVCFidx="{sample}.vcf.gz.tbi",
        pmdGVCF="{sample}.g.vcf.gz",
        pmdGVCFidx="{sample}.g.vcf.gz.tbi"
    output:
        pmdQV="{sample}.PMDqv.out"
    params:
        minDP=config['pmd']['minDP'],
        minGQ=config['pmd']['minGQ']
    threads:
        8
    shell:
        "total=$(bcftools view -i'FMT/GQ>=10 && FMT/MIN_DP>=6' {input.pmdGVCF}"
        """      | grep -v "^#" |  sed 's/END=//' """
        """      | awk -F"\t" '{{a+=($8-$2+1)}}END{{print a}}'); """
        "homDer=$(bcftools view -i'FMT/GQ>=10 && FMT/DP>=6' D.melanogaster.vcf.gz"
        ' | grep "1/1" | wc -l); '
        'errRate=$(echo "scale=10; $homDer / $total" | bc); '
        'QV=$(echo "scale=4; -10 * l($errRate)/l(10)" | bc -l); '
        'echo "total callable bases: $total" > {output.pmdQV}; '
        'echo "total hom. derived: $homDer" >> {output.pmdQV}; '
        'echo "error rate: $errRate" >> {output.pmdQV}; '
        'echo "QV: $QV" >> {output.pmdQV}; '

rule repeatModeler:
    input:
        "{sample}.cleaned.fasta"
    output:
        consensus="{sample}-families.fa",
        stk="{sample}-families.stk"
    threads:
        80
    singularity: config['singularity_images']['tetools']
    shell:
        "BuildDatabase -name {wildcards.sample} {input}"
        " && RepeatModeler -database {wildcards.sample}"
        "    -threads {threads} -LTRStruct"

rule repeatMasker:
    input:
        genome="{sample}.cleaned.fasta",
        lib="{sample}-families.fa"
    output:
        genome="{sample}.rm.fasta",
        gff="{sample}.rm.gff"
    threads:
        80
    singularity: config['singularity_images']['tetools']
    shell:
        "RepeatMasker -lib {input.lib} -xsmall -gff -pa {threads} {input.genome}; "
        "mv {input.genome}.masked {output.genome}; "
        "mv {input.genome}.out.gff {output.gff}"
